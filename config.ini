# -----------------------------------------------------------------------------
# Configuration File: config.ini
# Created On: 2024-08-25
# Version: 1.3.0
# Author: Quentin King
# Description:
# This configuration file is used by various Python scripts related to 
# Two-Tone Detect (TTD) for monitoring, alerting, FTP file handling, and more. 
# It contains settings for heartbeat monitoring, webhook URLs, retry mechanisms,
# logging configurations, FTP credentials, Pushover notification settings, and
# other configurable parameters.
#
# Changelog:
# - Version 1.3.0: Moved sensitive information (API keys, passwords) to .env file,
#                  added detailed comments for each section, and reorganized the 
#                  configuration for better clarity and maintainability.
# - Version 1.2.0: Added retry settings, notification rate limiting, external 
#                  script paths, and other configurable parameters.
# - Version 1.1.0: Added configurable heartbeat threshold, pushover priority,
#                  and cleaned up comments for clarity.
# - Version 1.0.0: Initial creation with basic configurations for monitoring
#                  and alerting.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Program Start Settings
# -----------------------------------------------------------------------------
# - program_dir: Directory where the program executable is located.
# - program_name: Name of the program executable to be started.
[Program_Start]
program_dir = C:\Path\To\Program\Directory    # <-- Update this path
program_name = YourProgramName.exe           # <-- Replace with your executable name

# -----------------------------------------------------------------------------
# Heartbeat Monitoring Settings
# -----------------------------------------------------------------------------
# - file_path: Path to the heartbeat log file.
# - check_interval: Interval in seconds between heartbeat checks.
# - threshold: Maximum allowable time difference in seconds between the current
#   time and the last heartbeat update before considering it a failure.
[Heartbeat]
file_path = C:\Path\To\Log\heartbeat.log    # <-- Update this path
check_interval = 90                         # <-- Adjust if needed
threshold = 135                             # <-- Adjust if needed

# -----------------------------------------------------------------------------
# System Restart Settings
# -----------------------------------------------------------------------------
# - enable_system_restart: Whether to enable automatic system restart (True/False).
# - restart_command: Command to execute for restarting the system.
[System]
enable_system_restart = False
restart_command = shutdown /r /f /t 0

# -----------------------------------------------------------------------------
# Webhook Settings
# -----------------------------------------------------------------------------
# - heartbeat_url: Webhook URL to send heartbeat failure notifications.
[Webhook]
heartbeat_url = https://your-webhook-url/endpoint/ttd_heartbeat   # <-- Replace with your URL

# -----------------------------------------------------------------------------
# Restart Path Settings
# -----------------------------------------------------------------------------
# - file_path: Path to the script that handles restarting Two-Tone Detect.
[Restart_Path]
file_path = C:\Path\To\Script\restart_ttd.py  # <-- Update this path

# -----------------------------------------------------------------------------
# Retry Logic Settings
# -----------------------------------------------------------------------------
# - max_retries: Maximum number of retry attempts if a process fails.
# - retry_delay: Initial delay in seconds before the first retry.
[ttd_heartbeat_Retry]
max_retries = 3
retry_delay = 5

# -----------------------------------------------------------------------------
# Notification Settings
# -----------------------------------------------------------------------------
# - cooldown_seconds: Minimum time in seconds between consecutive notifications.
[ttd_heartbeat_Notifications]
cooldown_seconds = 300

# -----------------------------------------------------------------------------
# Pushover Notification Settings
# -----------------------------------------------------------------------------
# - pushover_token: API token for Pushover notifications (now loaded from .env).
# - pushover_user: User key for Pushover notifications (now loaded from .env).
# - priority: Pushover priority level (0=Lowest, 1=Low, 2=Normal, 3=High, 4=Emergency).
# - retry: Retry interval in seconds for emergency priority notifications.
# - expire: Expiration time in seconds for emergency priority notifications.
# - sound: Sound to play for the notification (options: pushover, bike, bugle, etc.).
[ttd_heartbeat_Pushover]
pushover_token = ${PUSHOVER_TOKEN}    # <-- Set this in your .env file
pushover_user = ${PUSHOVER_USER}      # <-- Set this in your .env file
priority = 1  
retry = 60  
expire = 3600  
sound = pushover

# -----------------------------------------------------------------------------
# Logging Settings
# -----------------------------------------------------------------------------
# - log_dir: Directory where logs will be stored.
# - log_level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).
# - max_logs: Maximum number of log files to retain.
# - max_log_days: Maximum number of days to retain log files.
# - log_format: Format string for log messages.
# - max_log_size: Maximum size of each log file in bytes before rotation.
# - log_to_console: Whether to also log to the console (True/False).
[ttd_heartbeat_Logging]
log_dir = C:\Path\To\Logs\ttd_heartbeat_logs   # <-- Update this path
log_level = DEBUG
max_logs = 5
max_log_days = 10
log_format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
max_log_size = 1048576
log_to_console = False

# -----------------------------------------------------------------------------
# Shutdown Settings
# -----------------------------------------------------------------------------
# - shutdown_message: Message to log and send during a graceful shutdown.
# - perform_cleanup: Whether to perform log cleanup on shutdown (True/False).
[ttd_heartbeat_Shutdown]
shutdown_message = Heartbeat monitor is shutting down.
perform_cleanup = True

# -----------------------------------------------------------------------------
# Audit Logging Settings
# -----------------------------------------------------------------------------
# - audit_log_dir: Directory where audit logs will be stored.
# - audit_log_level: Logging level for audit logs (INFO, DEBUG, etc.).
[ttd_heartbeat_AuditLogging]
audit_log_dir = C:\Path\To\Logs\audit    # <-- Update this path
audit_log_level = INFO

# -----------------------------------------------------------------------------
# Feature Toggles
# -----------------------------------------------------------------------------
# - enable_restart_notifications: Enable notifications for system restarts.
# - enable_rate_limiting: Enable rate limiting for notifications.
[ttd_heartbeat_Features]
enable_restart_notifications = True
enable_rate_limiting = True


# -----------------------------------------------------------------------------
# FTP Credentials for ttd_audio_notification.py
# -----------------------------------------------------------------------------
# - ftp_server: FTP server address (now loaded from .env).
# - ftp_port: FTP server port (now loaded from .env).
# - ftp_user: FTP username (now loaded from .env).
# - ftp_pass: FTP password (now loaded from .env).
[ttd_audio_notification_ftp]
ftp_server = ${FTP_SERVER}  # <-- Set this in your .env file
ftp_port = ${FTP_PORT}      # <-- Set this in your .env file
ftp_user = ${FTP_USER}      # <-- Set this in your .env file
ftp_pass = ${FTP_PASS}      # <-- Set this in your .env file

# -----------------------------------------------------------------------------
# Base Audio Path to TTD Audio Files
# -----------------------------------------------------------------------------
# - base_path: Base directory for Two-Tone Detect audio files.
[ttd_audio_notification_Path]
base_path = C:\Path\To\TwoToneDetect74h\    # <-- Update this path

# -----------------------------------------------------------------------------
# Logging Settings for ttd_audio_notification.py
# -----------------------------------------------------------------------------
# - log_dir: Directory where logs will be stored.
# - log_level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).
# - max_logs: Maximum number of log files to retain.
# - max_log_days: Maximum number of days to retain log files.
# - log_to_console: Whether to also log to the console (True/False).
[ttd_audio_notification_Logging]
log_dir = C:\Path\To\Logs\ttd_audio_notification_logs    # <-- Update this path
log_level = DEBUG
max_logs = 5
max_log_days = 10
log_to_console = False

# -----------------------------------------------------------------------------
# Webhook Settings for ttd_audio_notification.py
# -----------------------------------------------------------------------------
# - ttd_audio_received_url: Webhook URL to send audio received notifications.
# - base_audio_url: Base URL for accessing audio files.
# - timeout_seconds: Timeout in seconds for webhook API requests.
[ttd_audio_notification_Webhook]
ttd_audio_received_url = https://your-webhook-url/endpoint/ttd_audio_received    # <-- Replace with your URL
base_audio_url = https://your-base-url/audio/                                    # <-- Replace with your base URL
timeout_seconds = 10

# -----------------------------------------------------------------------------
# Pushover Notification Settings for ttd_audio_notification.py
# -----------------------------------------------------------------------------
# - pushover_token: API token for Pushover notifications (now loaded from .env).
# - pushover_user: User key for Pushover notifications (now loaded from .env).
# - priority: Pushover priority level (0=Lowest, 1=Low, 2=Normal, 3=High, 4=Emergency).
# - retry: Retry interval in seconds for emergency priority notifications.
# - expire: Expiration time in seconds for emergency priority notifications.
# - sound: Sound to play for the notification (options: pushover, bike, bugle, etc.).
[ttd_audio_notification_Pushover]
pushover_token = ${PUSHOVER_TOKEN}  # <-- Set this in your .env file
pushover_user = ${PUSHOVER_USER}    # <-- Set this in your .env file
priority = 1
retry = 60
expire = 3600
sound = pushover

# -----------------------------------------------------------------------------
# Retry Logic Settings for ttd_audio_notification.py
# -----------------------------------------------------------------------------
# - max_retries: Maximum number of retry attempts if a webhook fails.
# - retry_delay: Initial delay in seconds before the first retry.
# - backoff_strategy: Retry strategy (linear, exponential, jitter).
[ttd_audio_notification_Retry]
max_retries = 3
retry_delay = 5
backoff_strategy = exponential

# -----------------------------------------------------------------------------
# File Handling Settings for ttd_audio_notification.py
# -----------------------------------------------------------------------------
# - temp_directory: Directory for storing temporary files.
[ttd_audio_notification_FileHandling]
temp_directory = C:\Path\To\Temp\Directory    # <-- Update this path

# -----------------------------------------------------------------------------
# Logging Settings for ttd_pre_notification.py
# -----------------------------------------------------------------------------
# - log_dir: Directory where logs will be stored.
# - log_level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).
# - max_logs: Maximum number of log files to retain.
# - max_log_days: Maximum number of days to retain log files.
# - max_log_size: Maximum size of each log file in bytes before rotation.
# - log_to_console: Whether to also log to the console (True/False).
# - verbose_logging: Enable verbose logging (True/False).
[ttd_pre_notification_Logging]
log_dir = C:\Path\To\Logs\ttd_pre_notification_logs    # <-- Update this path
log_level = DEBUG
max_logs = 10
max_log_days = 10
max_log_size = 1048576  
log_to_console = False
verbose_logging = False

# -----------------------------------------------------------------------------
# Webhook Settings for ttd_pre_notification.py
# -----------------------------------------------------------------------------
# - tone_detected_url: Webhook URL to send tone detected notifications.
# - base_audio_url: Base URL for accessing audio files.
# - secondary_webhook_url: Backup webhook URL.
# - timeout_seconds: Timeout in seconds for webhook API requests.
[ttd_pre_notification_Webhook]
tone_detected_url = https://your-webhook-url/endpoint/tone_detected            # <-- Replace with your URL
base_audio_url = https://your-base-url/audio/                                  # <-- Replace with your base URL
secondary_webhook_url = https://backup-webhook-url/endpoint/tone_detected      # <-- Replace with your backup URL
timeout_seconds = 10

# -----------------------------------------------------------------------------
# Pushover Notification Settings for ttd_pre_notification.py
# -----------------------------------------------------------------------------
# - pushover_token: API token for Pushover notifications (now loaded from .env).
# - pushover_user: User key for Pushover notifications (now loaded from .env).
# - rate_limit_seconds: Minimum time in seconds between consecutive notifications.
# - priority: Pushover priority level (0=Lowest, 1=Low, 2=Normal, 3=High, 4=Emergency).
# - retry: Retry interval in seconds for emergency priority notifications.
# - expire: Expiration time in seconds for emergency priority notifications.
# - sound: Sound to play for the notification (options: pushover, bike, bugle, etc.).
[ttd_pre_notification_Pushover]
pushover_token = ${PUSHOVER_TOKEN}  # <-- Set this in your .env file
pushover_user = ${PUSHOVER_USER}    # <-- Set this in your .env file
rate_limit_seconds = 300
priority = 2
retry = 60
expire = 3600
sound = pushover

# -----------------------------------------------------------------------------
# Retry Logic Settings for ttd_pre_notification.py
# -----------------------------------------------------------------------------
# - max_retries: Maximum number of retry attempts if a webhook fails.
# - initial_backoff: Initial delay in seconds before the first retry.
# - backoff_multiplier: Multiplier for exponential backoff.
[ttd_pre_notification_Retry]
max_retries = 3
initial_backoff = 5
backoff_multiplier = 2

# -----------------------------------------------------------------------------
# File Handling Settings for ttd_pre_notification.py
# -----------------------------------------------------------------------------
# - file_name_format: Format string for naming files.
# - temp_directory: Directory for storing temporary files.
[ttd_pre_notification_FileHandling]
file_name_format = {timestamp}_{file_name}
temp_directory = C:\Path\To\Temp\Directory    # <-- Update this path

# -----------------------------------------------------------------------------
# Notification Content Settings for ttd_pre_notification.py
# -----------------------------------------------------------------------------
# - title_prefix: Prefix for notification titles.
# - message_template: Template for notification messages.
[ttd_pre_notification_NotificationContent]
title_prefix = Tone Detected:
message_template = Audio file {file_name} was detected at {timestamp}.

# -----------------------------------------------------------------------------
# Logging Settings for BackupScript.py
# -----------------------------------------------------------------------------
# - log_dir: Directory where logs will be stored.
# - log_level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).
# - max_logs: Maximum number of log files to retain.
# - max_log_days: Maximum number of days to retain log files.
# - log_rotation_enabled: Whether log rotation is enabled (True/False).
# - log_archive_directory: Directory where archived logs will be stored.
[BackupScript_Logging]
log_dir = C:\Path\To\Logs\backup_logs      # <-- Update this path
log_level = DEBUG
max_logs = 10
max_log_days = 10
log_rotation_enabled = true
log_archive_directory = C:\Path\To\Logs\archive    # <-- Update this path

# -----------------------------------------------------------------------------
# Backup Settings for BackupScript.py
# -----------------------------------------------------------------------------
# - source_directory: Directory to back up.
# - temp_directory: Directory for storing temporary files.
# - retention_count: Number of backups to retain.
# - retention_days: Number of days to retain backups.
# - backup_verification_interval_days: Interval in days for verifying backups.
[BackupScript_Backup]
source_directory = C:\Path\To\Backup\Directory    # <-- Update this path
temp_directory = C:\Path\To\Temp\Directory        # <-- Update this path
retention_count = 10
retention_days = 10
backup_verification_interval_days = 7

# -----------------------------------------------------------------------------
# FTP Credentials for BackupScript.py (now loaded from .env)
# -----------------------------------------------------------------------------
# - server: FTP server address (now loaded from .env).
# - port: FTP server port (now loaded from .env).
# - user: FTP username (now loaded from .env).
# - pass: FTP password (now loaded from .env).
# - timeout: Timeout in seconds for FTP connections.
[BackupScript_FTP]
server = ${BACKUP_FTP_SERVER}  # <-- Set this in your .env file
port = ${BACKUP_FTP_PORT}      # <-- Set this in your .env file
user = ${BACKUP_FTP_USER}      # <-- Set this in your .env file
pass = ${BACKUP_FTP_PASS}      # <-- Set this in your .env file
timeout = 30

# -----------------------------------------------------------------------------
# Pushover Notification Settings for BackupScript.py
# -----------------------------------------------------------------------------
# - token: API token for Pushover notifications (now loaded from .env).
# - user: User key for Pushover notifications (now loaded from .env).
# - rate_limit_seconds: Minimum time in seconds between consecutive notifications.
# - priority: Pushover priority level (0=Lowest, 1=Low, 2=Normal, 3=High, 4=Emergency).
# - retry: Retry interval in seconds for emergency priority notifications.
# - expire: Expiration time in seconds for emergency priority notifications.
# - sound: Sound to play for the notification (options: pushover, bike, bugle, etc.).
[BackupScript_Pushover]
token = ${PUSHOVER_TOKEN}  # <-- Set this in your .env file
user = ${PUSHOVER_USER}    # <-- Set this in your .env file
rate_limit_seconds = 300
priority = 1
retry = 60
expire = 3600
sound = pushover

# -----------------------------------------------------------------------------
# Shutdown Settings for BackupScript.py
# -----------------------------------------------------------------------------
# - shutdown_message: Message to log and send during a graceful shutdown.
[BackupScript_Shutdown]
shutdown_message = Graceful shutdown initiated.

# -----------------------------------------------------------------------------
# Performance Monitoring Settings for BackupScript.py
# -----------------------------------------------------------------------------
# - enable_performance_logging: Whether to enable performance logging (True/False).
# - performance_log_path: Path to store performance logs.
[BackupScript_Performance]
enable_performance_logging = true
performance_log_path = C:\Path\To\Logs\performance_logs   # <-- Update this path

# -----------------------------------------------------------------------------
# Monitoring Settings for BackupScript.py
# -----------------------------------------------------------------------------
# - execution_time_logging: Whether to log script execution time (True/False).
[BackupScript_Monitoring]
execution_time_logging = true

# -----------------------------------------------------------------------------
# Error Handling Settings for BackupScript.py
# -----------------------------------------------------------------------------
# - notification_log_level: Logging level for sending error notifications.
# - error_retry_attempts: Number of retry attempts for handling errors.
# - error_retry_delay_seconds: Delay in seconds between retry attempts for errors.
[BackupScript_ErrorHandling]
notification_log_level = ERROR
error_retry_attempts = 3
error_retry_delay_seconds = 60
